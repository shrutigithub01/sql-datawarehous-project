CREATE OR ALTER PROCEDURE silver.load_silver AS

BEGIN 
	DECLARE @start_time DATETIME, @end_time DATETIME, @batch_start_time AS DATETIME, @batch_end_time AS DATETIME
    BEGIN TRY
        SET @batch_start_time = GETDATE()
        PRINT '=================================================='
        PRINT 'Loading Silver layer'
        PRINT '=================================================='

        PRINT '--------------------------------------------------'
        PRINT 'Loading CRM tables'
        PRINT '--------------------------------------------------'
    
        --- Loading silver.crm_cust_info
        SET @start_time =GETDATE()
        PRINT '>> Truncating table: silver.crm_cust_info <<'
        TRUNCATE TABLE silver.crm_cust_info
    
        PRINT '>> Inserting the data into: silver.crm_cust_info table <<'

        INSERT INTO silver.crm_cust_info (
	                                        cst_id,
									        cst_key,
									        cst_firstname,
									        cst_lastname,
									        cst_marital_status,
									        cst_gndr,
									        cst_create_date
									        )
        SELECT 
        cst_id,
        cst_key,
        TRIM(cst_firstname) AS cst_firstname,
        TRIM(cst_lastname) AS cst_lastname,
        CASE WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'
	         WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
	         ELSE 'N/A'
        END AS cst_marital_status,
        CASE WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
	         WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
	         ELSE 'N/A'
        END AS cst_gndr,
        cst_create_date
        FROM  (
             SELECT
	         *,
	         ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_first
	         FROM bronze.crm_cust_info) t
	         WHERE flag_first = 1 
         SET @end_time = GETDATE()
         PRINT '>> Load Duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + 'seconds'


        ----- Loading silver.crm_prd_indo---------
        SET @start_time = GETDATE()

        PRINT '>> Truncating table: silver.crm_prd_info <<'

        TRUNCATE TABLE silver.crm_prd_info
    
        PRINT '>> Inserting data into: silver.crm_prd_info <<'

        INSERT INTO silver.crm_prd_info
        (
        prd_id,
        cat_id,
        prd_key,
        prd_name,
        prd_cost ,
        prd_line,
        prd_start_dt ,
        prd_end_dt )

        SELECT 
        prd_id,
        /* Creating the separate column of category as we have diff cateogry 
        and replacing '-' by '_' */
        REPLACE (SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
        SUBSTRING(prd_key,7,len(prd_key)) AS prd_key,
        prd_name,
        -- Replacing NULL values with 0
        ISNULL(prd_cost,0) AS prd_cost,
        CASE  UPPER(TRIM(prd_line)) 
             WHEN  'M' THEN 'Mountain'
             WHEN  'R' THEN 'Road'
             WHEN  'S' THEN 'Other Sales'
             WHEN  'T' THEN 'Touring'
             ELSE 'n/a'
        END AS prd_line,
        CAST(prd_start_dt AS DATE) AS prd_start_dt  ,
        /* Replacing  end date with the next start date - 1  */
        CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt) - 1 AS DATE) AS prd_end_dt
        FROM 
        bronze.crm_prd_info

        SET @end_time = GETDATE ()
        PRINT '>> Load Duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + 'seconds'
    
        -- Loading silver.crm_sales_details table
        SET @start_time = GETDATE()

        PRINT '>> Truncating table: silver.crm_sales_details <<'

        TRUNCATE TABLE silver.crm_sales_details
    
        PRINT '>> Inserting data into: silver.crm_sales_details <<'
    

        INSERT INTO silver.crm_sales_details
        (sls_ord_num ,
        sls_prd_key ,
        sls_cust_id ,
        sls_order_dt ,
        sls_ship_dt ,
        sls_due_dt,
        sls_sales ,
        sls_quantity ,
        sls_price )

        SELECT 
        sls_ord_num,
        sls_prd_key,
        sls_cust_id,
        -- Replacing 0 with NULL
        CASE WHEN sls_order_dt= 0 OR LEN(sls_order_dt) ! = 8  THEN NULL 
             ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)
        END AS sls_order_dt,

        CASE WHEN sls_ship_dt= 0 OR LEN(sls_ship_dt) ! = 8  THEN NULL 
             ELSE CAST(CAST(sls_ship_dt AS VARCHAR) AS DATE)
        END AS sls_ship_dt,

        CASE WHEN sls_due_dt= 0 OR LEN(sls_due_dt) ! = 8  THEN NULL 
             ELSE CAST(CAST(sls_due_dt AS VARCHAR) AS DATE)
        END AS sls_due_dt,

        CASE  WHEN sls_sales IS NULL OR sls_price < = 0 OR sls_sales ! = ABS(sls_price) * sls_quantity 
              THEN  ABS(sls_price) * sls_quantity 
              ELSE sls_sales
        END AS sls_sales,
        sls_quantity,
        -- Checking sales price FOR null and negative value , then replcaing it with correct value
        CASE  WHEN sls_price IS NULL  
              THEN  sls_price / NULLIF(sls_quantity,0)
              WHEN sls_price < = 0 
              THEN ABS(sls_price)
              ELSE sls_price
        END AS sls_price

        FROM bronze.crm_sales_details

        SET @end_time = GETDATE()

        PRINT '>> Load Duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + 'seconds'

        --***********Loading erp_cust_az12 table**********************************************************************

        SET @start_time = GETDATE()

        PRINT '>> Truncating table: erp_cust_az12 <<'

        TRUNCATE TABLE silver.erp_cust_az12
    
        PRINT '>> Inserting data into: silver.erp_cust_az12 <<'

        INSERT INTO silver.erp_cust_az12
        (
        cid,
        bdate,
        gen)

        SELECT 
        CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid,4, LEN(cid))
        ELSE cid
        END AS cid,

        CASE WHEN bdate > GETDATE() THEN NULL
             ELSE bdate
        END AS bdate,

        CASE 
            WHEN UPPER(TRIM(gen))  IN ('M','MALE') THEN 'Male'
            WHEN UPPER(TRIM(gen)) IN ('F','FEMALE') THEN 'Female'
            ELSE 'N/A'
        END AS gen
        FROM bronze.erp_cust_az12

        SET @end_time = GETDATE()

        PRINT '>> Load Duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + 'seconds'

        --********************************************************************************

         SET @start_time = GETDATE()

        PRINT '>> Truncating table: erp_loc_a101 <<'

        TRUNCATE TABLE silver.erp_loc_a101
    
        PRINT '>> Inserting data into: silver.erp_loc_a101 <<'

        INSERT INTO silver.erp_loc_a101
        (cid,
        cntry)

        SELECT 
        REPLACE(cid,'-','') AS cid,

        CASE WHEN UPPER(TRIM(cntry)) = 'DE' THEN 'Germany'
             WHEN UPPER(TRIM(cntry)) IN ('US','USA') THEN 'United States'
             WHEN UPPER(TRIM(cntry)) = '' OR cntry IS NULL THEN 'N/A'
             ELSE TRIM(cntry)
        END AS cntry

        FROM bronze.erp_loc_a101

        SET @end_time = GETDATE()

        PRINT '>> Load Duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + 'seconds'

        --************************************************************

         SET @start_time = GETDATE()

        PRINT '>> Truncating table: silver.erp_px_cat_giv2 <<'

        TRUNCATE TABLE silver.erp_px_cat_giv2
    
        PRINT '>> Inserting data into: silver.erp_px_cat_giv2 <<'


        INSERT INTO silver.erp_px_cat_giv2
        (id,
        cat,
        subcat,
        maintenance)

        SELECT 
        id,
        TRIM(cat) AS cat,
        TRIM(subcat) AS subcat,
        TRIM(maintenance) AS maintenance
        FROM bronze.erp_px_cat_giv2
        SET @end_time = GETDATE()

        PRINT '>> Load Duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + 'seconds'

END TRY 
BEGIN CATCH
        PRINT 'ERROR OCCURED WHILE LOADING'
        PRINT 'Error Message' + ':' + ERROR_MESSAGE()
        PRINT 'Error Message' + ':' +  CAST (ERROR_NUMBER() AS NVARCHAR)
    END CATCH
SET @batch_end_time = GETDATE()
PRINT '>> Batch Load Duration: ' + CAST ( DATEDIFF(second,@batch_start_time, @batch_end_time) as NVARCHAR) + 'seconds'
END




